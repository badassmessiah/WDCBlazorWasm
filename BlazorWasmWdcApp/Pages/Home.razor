@page "/"
@using Newtonsoft.Json;
@inject HttpClient Http

<PageTitle>WDC</PageTitle>
    <div class="parent">
        <div class="container">
            <div class="item">
                <InputDate class="date-picker" @bind-Value="datetime" />
            </div>
            <div class="item">
                <InputNumber class="input-number" @bind-Value="number"></InputNumber>
            </div>
            <div class="item">
                <button class="btn" @onclick="Calculate" >Calculate</button>
            </div>
        </div>

        <div class="result-container">
            <div class="item">
                <label class="label">End Date: @result</label>
            </div>
            <div class="item">
                <button class="btn">add in your calendar</button>
            </div>
        </div>
    </div>


    <style>
        .label {
            margin: 10px;
            padding: 10px;
            border: 2px dotted #006aff;
            border-radius: 10px;
            transition: all 0.3s ease-out;
            width: 100%;
            max-width: 350px;
            box-sizing: border-box;
		}
        .parent {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 70vh;
		}
        .result-container{
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 20vh;
            width: 50vh;
            border: 2px solid #006aff;
            border-radius: 10px;

        }
        .date-picker, .input-number {
            margin: 10px;
            padding: 10px;
            border: 2px dotted #006aff;
            border-radius: 10px;
            transition: all 0.3s ease-out;
            width: 100%;
            max-width: 350px;
            box-sizing: border-box;
        }

        .date-picker:hover, .input-number:hover {
            border: 2px dotted #00e9a6;
        }

        .item {
            align-items: center;
            padding: 10px;
            border: none;
            transition: all 0.3s ease-out;
            width: 100%;
            max-width: 350px;
            box-sizing: border-box;
        }

        .container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 50vh;
            width: 50vh;
            border: 2px solid #006aff;
            border-radius: 10px;
            margin-bottom: 10px;
        }

        .btn {
            margin: 10px;
            padding: 10px;
            border: none;
            background: linear-gradient(to right, #006aff, #00e9a6);
            border-radius: 50px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease-out;
            width: 100%;
            max-width: 350px;
            box-sizing: border-box;
        }

        .btn:hover {
            background: linear-gradient(to right, #00e9a6, #006aff);
            transform: scale(1.05);
        }

        button {
            background: none;
            border: none;
            color: white;
            font-size: 16px;
            cursor: pointer;
        }
    </style>

@code{
    DateTime datetime = DateTime.Now;
    int number = 0;
    string result = "";
    DateTime resultDate;    

    public List<PublicHoliday> _holidays = new List<PublicHoliday>();

    string jpath = "holidays.json";

    private async void Calculate()
    {
        resultDate = await WorkingDays.CalculateWorkingDays(datetime, number, _holidays);
        result = $"The end date is {resultDate.Day} {resultDate.ToString("MMMM")}";

    }

    protected override async Task OnInitializedAsync()
	{
        
		_holidays = await Http.GetFromJsonAsync<List<PublicHoliday>>(jpath);
	}
}

@code{
    public class PublicHoliday
    {
        public string Name { get; set; }
        public DateTime Date { get; set; }
    }
}
@code{
    public class WorkingDays
    {
        

        public static async Task<DateTime> CalculateWorkingDays(DateTime startDate, int days, List<PublicHoliday> hd)
        {

             return CalculateEndDate(startDate, days, hd);
        }


        // private static async Task<List<PublicHoliday>> GetHolidays(string path)
        // {
        //     try
        //     {
        //         HttpClient client = new HttpClient();
        //         string fileContent = await client.GetStringAsync(path);
        //         if (string.IsNullOrEmpty(fileContent))
        //         {

        //             throw new Exception("No data found");
        //         }
        //         return JsonConvert.DeserializeObject<List<PublicHoliday>>(fileContent);
                
        //     }
        //     catch (Exception e)
        //     {

        //         throw new Exception("No data found");
        //     }
        // }

        private static DateTime CalculateEndDate(DateTime startDate, int days, List<PublicHoliday> holidays)
        {
            DateTime endDate = startDate;
            while (days > 1)
            {
                endDate = endDate.AddDays(1);
                if (endDate.DayOfWeek != DayOfWeek.Saturday && endDate.DayOfWeek != DayOfWeek.Sunday && !IsPublicHoliday(endDate, holidays))
                {
                    days--;
                }
            }
            return endDate;
        }

        private static bool IsPublicHoliday(DateTime date, List<PublicHoliday> holidays)
        {
            return holidays.Any(h => h.Date.Date == date.Date);
        }
    }
}