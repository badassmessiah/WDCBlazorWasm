@page "/"
@page "/authentication/{action}"
@page "/oauth"

<div class="background">
	<RemoteAuthenticatorView Action="@Action" />
</div>
@using Newtonsoft.Json;
@inject HttpClient Http
@inject SessionStorageAccessor SessionStorageAccessor
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>WDC</PageTitle>
<div class="container">
	<div class="row">
		<div class="col"></div>
		<div class="col-md square">
			<div class="item">
				<label class="labels">Start Date</label>
				<InputDate class="date-picker" @bind-Value="datetime" />
			</div>
			<div class="item">
				<label class="labels">Days</label>
				<InputNumber class="input-number" @bind-Value="number"></InputNumber>
			</div>
			<div class="item">
				<button class="btn" @onclick="Calculate">Calculate</button>
				<label class="label">@result</label>
			</div>
		</div>
		<div class="col"></div>
	</div>

</div>
<div class="container">
	<div class="row">
		<div class="col"></div>
		<div class="col-md square">
			<div class="item">
				<label class="labels">Event Subject</label>
				<InputText class="input-number" @bind-Value="subject"></InputText>
			</div>
			<div class="item">
				<AuthorizeView>
					<Authorized>
						<button @onclick="AddToCalendar" class="btn" disabled="@isAddingEvent">@addEventButtonText</button>
					</Authorized>
					<NotAuthorized>
						<button @onclick="LogIn" class="btn">Log in to add in your calendar</button>
					</NotAuthorized>
				</AuthorizeView>

			</div>

		</div>
		<div class="col"></div>
	</div>
</div>
<div class="container">
	<div class="row">
		<div class="col"></div>
		<div class="col-md square">
			<div class="item">
				<label class="labels">Project Title</label>
				<InputText class="input-number" @bind-Value="projectTitle"></InputText>
			</div>
			<div class="item">
				<button class="btn" @onclick="HandleCreateProject" disabled="@isCreatingProject">@createProjectButtonText</button>
				<label class="label">@projectResult</label>
			</div>
		</div>
		<div class="col"></div>
	</div>
</div>
<MicrosoftLogin/>

<style>
	@@import url('https://fonts.googleapis.com/css2?family=Poppins&display=swap');

	body {
		font-family: "Poppins", sans-serif;
	}

	.background {
		z-index: -10;
	}

	.labels {
		color: white;
		padding-left: 10px;
		padding-bottom: 0;
		margin-bottom: 0;
		font-size: 13px;
	}

	.label {
		margin-top: 10px;
		padding: 10px;
		border: 2px dotted #006aff;
		background-color: white;
		border-radius: 10px;
		transition: all 0.3s ease-out;
		width: 100%;
		height: 40px;
	}

	/* 	.container {
								margin-top: 50px;

							} */

	.square {
		margin-bottom: 50px;
		border: 2px solid #004ab2;
		border-radius: 10px;
		background-color: rgba(0,74,178,0.1);
	}


	.date-picker, .input-number {
		/* margin: 10px; */
		padding: 10px;
		border: 2px dotted #006aff;
		border-radius: 10px;
		transition: all 0.3s ease-out;
		width: 100%;
	}

		.date-picker:hover, .input-number:hover {
			border: 2px dotted #00e9a6;
		}

	.item {
		align-items: center;
		padding: 10px;
		border: none;
		transition: all 0.3s ease-out;
		width: 100%;
	}



	.btn {
		/* margin: 10px; */
		padding: 10px;
		border: none;
		background: linear-gradient(to right, #006aff, #00e9a6);
		border-radius: 50px;
		color: white;
		cursor: pointer;
		transition: all 0.3s ease-out;
		width: 100%;
	}

		.btn:hover {
			background: linear-gradient(to right, #00e9a6, #006aff);
			color: white;
			transform: scale(1.05);
		}

		.btn:disabled {
			background: none;
			border: 2px solid gray;
			color: white;
			font-size: 16px;
			cursor: pointer;
		}

	button {
		background: none;
		border: none;
		color: white;
		font-size: 16px;
		cursor: pointer;
	}
</style>

<script>

	function openAuthPopup(url) {
		var width = 600, height = 600;
		var left = (screen.width / 2) - (width / 2);
		var top = (screen.height / 2) - (height / 2);
		var authWindow = window.open(url, 'authPopup', `width=${width},height=${height},top=${top},left=${left}`);

		var interval = setInterval(function () {
			try {
				if (authWindow.location.href.indexOf('access_token=') !== -1) {
					clearInterval(interval);
					var urlParams = new URLSearchParams(authWindow.location.hash.substring(1));
					var accessToken = urlParams.get('access_token');
					authWindow.close();
					DotNet.invokeMethodAsync('BlazorWasmWdcApp', 'ReceiveAccessToken', accessToken);
				}
			} catch (e) {
			}
		}, 1000);
	}

</script>



@code {
	public string projectTitle = "";
	public string projectResult = "";

	public static string _accessToken = "";

	private bool isCreatingProject = false;
	private string createProjectButtonText = "Create Project In SDP";

	[JSInvokable]
	public static void ReceiveAccessToken(string token)
	{
		_accessToken = token;
	}

	private async Task HandleCreateProject()
	{
		isCreatingProject = true;
		createProjectButtonText = "Adding...";
		await CreateProject();
		isCreatingProject = false;
		createProjectButtonText = "Create Project In SDP";
	}

	public async Task CreateProject()
	{
		if (projectTitle.Length > 0 && projectTitle.Length < 250)
		{
			try
			{
				await SDPCloud.GetAccessTokenAsync(JSRuntime);

				while (string.IsNullOrEmpty(_accessToken))
				{
					await Task.Delay(100);
				}

				var project = new Project
					{
						title = projectTitle,
						actual_end_time = new TimeValue { value = ToUnixTimeMilliseconds(resultDate).ToString() },
						actual_start_time = new TimeValue { value = ToUnixTimeMilliseconds(datetime).ToString() },
						scheduled_end_time = new TimeValue { value = ToUnixTimeMilliseconds(resultDate).ToString() },
						projected_end = new TimeValue { value = ToUnixTimeMilliseconds(resultDate).ToString() },
						scheduled_start_time = new TimeValue { value = ToUnixTimeMilliseconds(datetime).ToString() }
					};

				await SDPCloud.CreateNewProject(_accessToken, project);

				projectResult = "Project created successfully";
			}
			catch (Exception ex)
			{
				projectResult = ex.Message;
			}
		}
		else
		{
			projectResult = "Please type something in project title";
		}
	}


	private long ToUnixTimeMilliseconds(DateTime dateTime)
	{
		return new DateTimeOffset(dateTime).ToUnixTimeMilliseconds();
	}

	private string StoredValue;
	private string Key = "e542acdc-4f23-4bd2-b1ce-5a181f4104dc.73075322-9647-42a5-b106-a8446d362b6a-login.microsoftonline.com-accesstoken-58a97420-c2fc-45ed-bdfb-06ebec62cf81-73075322-9647-42a5-b106-a8446d362b6a-profile openid email https://graph.microsoft.com/calendars.readwrite https://graph.microsoft.com/user.read--";

	public async Task<string> GetValueAsync()
	{
		StoredValue = await SessionStorageAccessor.GetValueAsync<string>(Key);

		if (!string.IsNullOrEmpty(StoredValue))
		{
			var jsonObject = JsonConvert.DeserializeObject<Dictionary<string, string>>(StoredValue);
			if (jsonObject != null && jsonObject.TryGetValue("secret", out string secret))
			{
				return secret;
			}
		}
		return null;
	}



	DateTime datetime = DateTime.Now;
	int number = 0;
	string result = "";
	string subject = "";
	DateTime resultDate;
	[Parameter] public string Action { get; set; }
	public List<PublicHoliday> _holidays = new List<PublicHoliday>();

	private bool isAddingEvent = false;
	private string addEventButtonText = "Add in your calendar";


	public CalendarEvent CreateEvent(string subject, DateTime dateTime)
	{
		var dateAtStartOfTheDay = dateTime.Date;

		var newEvent = new CalendarEvent
			{
				Subject = subject,
				Start = new DateTimeTimeZone
				{
					DateTime = dateAtStartOfTheDay.ToString("yyyy-MM-ddTHH:mm:ss"),
					TimeZone = "Asia/Tbilisi"
				},
				End = new DateTimeTimeZone
				{
					DateTime = dateAtStartOfTheDay.AddDays(1).ToString("yyyy-MM-ddTHH:mm:ss"),
					TimeZone = "Asia/Tbilisi"
				}
			};

		return newEvent;

	}


	public async Task AddToCalendar()
	{
		if (subject.Length > 0)
		{
			try
			{
				isAddingEvent = true;
				addEventButtonText = "Adding...";

				var client = new HttpClient();
				var request = new HttpRequestMessage(HttpMethod.Post, "https://graph.microsoft.com/v1.0/me/events");
				request.Headers.Add("Authorization", $"Bearer {await GetValueAsync()}");

				var newEvent = CreateEvent(subject, resultDate);
				var content = new StringContent(JsonConvert.SerializeObject(newEvent), System.Text.Encoding.UTF8, "application/json");
				request.Content = content;

				var response = await client.SendAsync(request);
				response.EnsureSuccessStatusCode();

				subject = "Event added successfully";
			}
			catch (Exception ex)
			{
				subject = ex.Message;
			}
			finally
			{
				isAddingEvent = false;
				addEventButtonText = "Add in your calendar";
			}
		}
		else
		{
			subject = "Please type something in subject";
		}
	}



	public async void LogIn()
	{
		Navigation.NavigateToLogin("authentication/login");

		
	}

	string jpath = "holidays.json";

	private async void Calculate()
	{
		resultDate = await WorkingDays.CalculateWorkingDays(datetime, number, _holidays);

		if (resultDate.Year == DateTime.Now.Year)
		{
			result = $"The end date is {resultDate.Day} {resultDate.ToString("MMMM")}";
		}
		else
		{
			result = $"The end date is {resultDate.Day} {resultDate.ToString("MMMM")} {resultDate.Year}";
		}

	}

	protected override async Task OnInitializedAsync()
	{
		_holidays = await Http.GetFromJsonAsync<List<PublicHoliday>>(jpath);
	}
}

@code {
	public class PublicHoliday
	{
		public string Name { get; set; }
		public DateTime Date { get; set; }
	}
}
@code {
	public class WorkingDays
	{


		public static async Task<DateTime> CalculateWorkingDays(DateTime startDate, int days, List<PublicHoliday> hd)
		{

			return CalculateEndDate(startDate, days, hd);
		}



		private static DateTime CalculateEndDate(DateTime startDate, int days, List<PublicHoliday> holidays)
		{
			while (startDate.DayOfWeek == DayOfWeek.Saturday || startDate.DayOfWeek == DayOfWeek.Sunday || IsPublicHoliday(startDate, holidays))
			{
				startDate = startDate.AddDays(1);
			}

			DateTime endDate = startDate;
			while (days > 1)
			{
				endDate = endDate.AddDays(1);
				if (endDate.DayOfWeek != DayOfWeek.Saturday && endDate.DayOfWeek != DayOfWeek.Sunday && !IsPublicHoliday(endDate, holidays))
				{
					days--;
				}
			}
			return endDate;
		}

		private static bool IsPublicHoliday(DateTime date, List<PublicHoliday> holidays)
		{
			return holidays.Any(h => h.Date.Date == date.Date);
		}
	}
}


<div class="background">
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
	<span></span>
</div>

<style>
	@@keyframes move {
		100% {
			transform: translate3d(0, 0, 1px) rotate(360deg);
		}
	}

	.background {
		position: fixed;
		width: 100vw;
		height: 100vh;
		top: 0;
		left: 0;
		background: #f8f7ff;
		overflow: hidden;
		z-index: -1;
	}

		.background span {
			width: 21vmin;
			height: 21vmin;
			border-radius: 21vmin;
			backface-visibility: hidden;
			position: absolute;
			animation: move;
			animation-duration: 27;
			animation-timing-function: linear;
			animation-iteration-count: infinite;
		}


			.background span:nth-child(0) {
				color: #ff6600;
				top: 33%;
				left: 49%;
				animation-duration: 103s;
				animation-delay: -87s;
				transform-origin: 1vw 21vh;
				box-shadow: -42vmin 0 5.429606828671653vmin currentColor;
			}

			.background span:nth-child(1) {
				color: #ff6600;
				top: 16%;
				left: 25%;
				animation-duration: 22s;
				animation-delay: -46s;
				transform-origin: -22vw 1vh;
				box-shadow: -42vmin 0 5.82597149677256vmin currentColor;
			}

			.background span:nth-child(2) {
				color: #006aff;
				top: 77%;
				left: 84%;
				animation-duration: 92s;
				animation-delay: -166s;
				transform-origin: -24vw 6vh;
				box-shadow: 42vmin 0 5.365305364784211vmin currentColor;
			}

			.background span:nth-child(3) {
				color: #00e9a6;
				top: 77%;
				left: 63%;
				animation-duration: 217s;
				animation-delay: -148s;
				transform-origin: -8vw 18vh;
				box-shadow: -42vmin 0 5.81986177986295vmin currentColor;
			}

			.background span:nth-child(4) {
				color: #ff6600;
				top: 77%;
				left: 1%;
				animation-duration: 163s;
				animation-delay: -145s;
				transform-origin: -23vw 23vh;
				box-shadow: -42vmin 0 5.484322047164815vmin currentColor;
			}

			.background span:nth-child(5) {
				color: #ff6600;
				top: 19%;
				left: 82%;
				animation-duration: 66s;
				animation-delay: -18s;
				transform-origin: 5vw 23vh;
				box-shadow: -42vmin 0 6.1566293844821915vmin currentColor;
			}

			.background span:nth-child(6) {
				color: #00e9a6;
				top: 18%;
				left: 96%;
				animation-duration: 136s;
				animation-delay: -102s;
				transform-origin: -13vw 7vh;
				box-shadow: 42vmin 0 5.988002914818748vmin currentColor;
			}

			.background span:nth-child(7) {
				color: #ff6600;
				top: 37%;
				left: 86%;
				animation-duration: 107s;
				animation-delay: -161s;
				transform-origin: -16vw 14vh;
				box-shadow: 42vmin 0 5.815277587294693vmin currentColor;
			}

			.background span:nth-child(8) {
				color: #ff6600;
				top: 37%;
				left: 67%;
				animation-duration: 209s;
				animation-delay: -23s;
				transform-origin: 9vw 11vh;
				box-shadow: 42vmin 0 5.509744569409113vmin currentColor;
			}

			.background span:nth-child(9) {
				color: #ff6600;
				top: 56%;
				left: 82%;
				animation-duration: 35s;
				animation-delay: -222s;
				transform-origin: 21vw 21vh;
				box-shadow: 42vmin 0 5.445490502337991vmin currentColor;
			}

			.background span:nth-child(10) {
				color: #ff6600;
				top: 6%;
				left: 88%;
				animation-duration: 172s;
				animation-delay: -133s;
				transform-origin: 20vw -4vh;
				box-shadow: -42vmin 0 5.348987647821543vmin currentColor;
			}

			.background span:nth-child(11) {
				color: #006aff;
				top: 70%;
				left: 49%;
				animation-duration: 188s;
				animation-delay: -127s;
				transform-origin: 11vw 0vh;
				box-shadow: 42vmin 0 6.001696710636967vmin currentColor;
			}

			.background span:nth-child(12) {
				color: #00e9a6;
				top: 1%;
				left: 28%;
				animation-duration: 191s;
				animation-delay: -89s;
				transform-origin: 19vw -13vh;
				box-shadow: 42vmin 0 6.156798743813502vmin currentColor;
			}

			.background span:nth-child(13) {
				color: #006aff;
				top: 41%;
				left: 63%;
				animation-duration: 86s;
				animation-delay: -26s;
				transform-origin: 6vw -17vh;
				box-shadow: 42vmin 0 5.556686635320811vmin currentColor;
			}

			.background span:nth-child(14) {
				color: #00e9a6;
				top: 9%;
				left: 71%;
				animation-duration: 93s;
				animation-delay: -220s;
				transform-origin: -16vw 21vh;
				box-shadow: -42vmin 0 5.56664443670566vmin currentColor;
			}

			.background span:nth-child(15) {
				color: #00e9a6;
				top: 75%;
				left: 78%;
				animation-duration: 207s;
				animation-delay: -154s;
				transform-origin: 9vw -11vh;
				box-shadow: 42vmin 0 6.097876693485353vmin currentColor;
			}

			.background span:nth-child(16) {
				color: #00e9a6;
				top: 11%;
				left: 32%;
				animation-duration: 14s;
				animation-delay: -222s;
				transform-origin: 1vw -14vh;
				box-shadow: 42vmin 0 5.801706341088834vmin currentColor;
			}

			.background span:nth-child(17) {
				color: #006aff;
				top: 57%;
				left: 16%;
				animation-duration: 169s;
				animation-delay: -215s;
				transform-origin: 4vw -19vh;
				box-shadow: 42vmin 0 5.958364038613719vmin currentColor;
			}

			.background span:nth-child(18) {
				color: #00e9a6;
				top: 14%;
				left: 21%;
				animation-duration: 27s;
				animation-delay: -126s;
				transform-origin: 4vw -8vh;
				box-shadow: -42vmin 0 5.999648269766816vmin currentColor;
			}

			.background span:nth-child(19) {
				color: #ff6600;
				top: 30%;
				left: 36%;
				animation-duration: 93s;
				animation-delay: -91s;
				transform-origin: -6vw 21vh;
				box-shadow: 42vmin 0 5.789535313373826vmin currentColor;
			}

			.background span:nth-child(20) {
				color: #00e9a6;
				top: 5%;
				left: 42%;
				animation-duration: 141s;
				animation-delay: -166s;
				transform-origin: -17vw -17vh;
				box-shadow: 42vmin 0 5.4502872470674735vmin currentColor;
			}

</style>